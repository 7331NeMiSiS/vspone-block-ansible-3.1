name: Publish Ansible Collection

on:
  push:
    tags:
      - '*'  # Trigger on all GitHub tag pushes
  workflow_dispatch:

jobs:
  publish:
    name: Publish Collection to Galaxy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Extract Version from galaxy.yml
        id: get_version
        run: |
          VERSION=$(grep '^version:' galaxy.yml | awk '{print $2}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check If Version Exists on Galaxy
        id: check_version
        env:
          COLLECTION_NAMESPACE: hitachivantara
          COLLECTION_NAME: vspone_block
          API_KEY: ${{ secrets.ANSIBLE_COLLECTIONS_TOKEN }}
        run: |
          COLLECTION_VERSION=$(curl -s -H "Authorization: Token $API_KEY" \
            "https://galaxy.ansible.com/api/v3/plugin/ansible/content/published/collections/index/${COLLECTION_NAMESPACE}/${COLLECTION_NAME}/versions/" | \
            jq -r '.data[].version' | grep -x "$VERSION" || echo "not_found")

          if [[ "$COLLECTION_VERSION" == "not_found" ]]; then
            echo "PUBLISH=true" >> $GITHUB_ENV
          else
            echo "PUBLISH=false" >> $GITHUB_ENV
          fi

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: collection-tarball
          path: .

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: pip install ansible

      - name: Publish to Ansible Galaxy
        if: env.PUBLISH == 'true'
        env:
          API_KEY: ${{ secrets.ANSIBLE_COLLECTIONS_TOKEN }}
        run: ansible-galaxy collection publish *.tar.gz --api-key $API_KEY

      - name: Skip Publish (Already Exists)
        if: env.PUBLISH == 'false'
        run: echo "Version $VERSION already exists on Ansible Galaxy. Skipping publish."
