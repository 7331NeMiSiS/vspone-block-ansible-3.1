---
# Playbook: monitor_hitachi_storage.yml
# Description: Collects storage pool usage information from Hitachi storage arrays
#              and stores results sorted by pool capacity.

- name: Monitor Hitachi Storage Arrays
  hosts: localhost
  gather_facts: no
  vars:
    hitachi_username: "{{ vault_storage_username }}"
    hitachi_password: "{{ vault_storage_secret }}"
    hitachi_storage_ips:
      - 192.168.180.12
      - 192.168.181.12
      - 192.168.180.163
    results_path: "./hitachi_pool_usage.json"
    temp_pool_results: []

  tasks:
    - name: Create temporary directory for results
      tempfile:
        state: directory
        suffix: hitachi
      register: temp_dir

    - name: Process each Hitachi storage array
      block:
        - name: Connect to Hitachi storage array and retrieve pool information
          uri:
            url: "https://{{ item }}/ConfigurationManager/v1/objects/pools"
            method: GET
            user: "{{ vault_storage_username }}"
            password: "{{ vault_storage_secret }}"
            force_basic_auth: yes
            validate_certs: no
            headers:
              Accept: "application/json"
              Content-Type: "application/json"
          register: pool_response
          with_items: "{{ hitachi_storage_ips }}"
          ignore_errors: yes
          no_log: yes

        - name: Print summary of pool usage
          debug:
            var: pool_response

        - name: Reset temp_pool_results
          set_fact:
            temp_pool_results: [ ]

        - name: Process pool data for array
          set_fact:
            temp_pool_results: "{{ temp_pool_results + [
              {
                'array_ip': pool.item,
                'data': pool.json.data
              }
            ] }}"
          loop: "{{ pool_response.results }}"
          loop_control:
            loop_var: pool
            label: "{{ pool.item }} using {{pool.invocation.module_args.user}} on url {{ pool.url | default('unknown') }}"

        - name: Print Pool Information
          debug:
            var: temp_pool_results

        - name: Create list of pools with their details
          ansible.builtin.set_fact:
            pool_list: "{{ pool_list | default([]) + [
            {'array_ip': item.0.array_ip, 
            'pool_id': item.1.poolId, 
            'pool_name': item.1.poolName, 
            'utilized_capacity': item.1.usedCapacityRate, 
            'available_capacity': item.1.availableVolumeCapacity, 
            'total_capacity': item.1.totalPoolCapacity}] }}"
          loop: "{{ temp_pool_results | subelements('data') }}"

        - name: Display pool information
          ansible.builtin.debug:
            msg: "Pool ID: {{ item.pool_id }}, Pool Name: {{ item.pool_name }}, Array IP: {{ item.array_ip }}, Utilized Capacity: {{ item.utilized_capacity }}%"
          loop: "{{ pool_list }}"





        - name: Sort pools by capacity (descending)
          set_fact:
            sorted_pools: "{{ pool_list | sort(attribute='available_capacity') }}"

        - name: Display Sorted pool information
          ansible.builtin.debug:
            msg: "Pool ID: {{ item.pool_id }}, Pool Name: {{ item.pool_name }}, Array IP: {{ item.array_ip }}, Utilized Capacity: {{ item.utilized_capacity }}%"
          loop: "{{ sorted_pools }}"

        - name: Print Pool Information
          debug:
            var: sorted_pools

#
#        - name: Generate final report with usage percentages
#          copy:
#            content: "{{ pools_by_array | to_nice_json }}"
#            dest: "{{ results_path }}"
#          delegate_to: localhost
#
#        - name: Print summary of pool usage
#          debug:
#            msg: |
#              Hitachi Storage Array Pool Usage Summary:
#              {% for array_ip, pools in pools_by_array.items() %}
#              Storage Array: {{ array_ip }}
#              {% for pool in pools %}
#              - Pool: {{ pool.pool_name }} (ID: {{ pool.pool_id }})
#                Capacity: {{ pool.capacity_gb | round(2) }} GB
#                Used: {{ pool.used_capacity_gb | round(2) }} GB
#                Usage: {{ pool.usage_percent }}%
#                Status: {{ pool.status }}
#              {% endfor %}
#              {% endfor %}
#
#      rescue:
#        - name: Report error when processing storage arrays
#          debug:
#            msg: "Failed to collect information from one or more storage arrays. Please check credentials and connectivity."
#
#      always:
#        - name: Clean up temporary directory
#          file:
#            path: "{{ temp_dir.path }}"
#            state: absent
#          when: temp_dir.path is defined
#
#    - name: Alert on high pool usage
#      debug:
#        msg: "WARNING: Pool {{ item.pool_name }} on array {{ item.array_ip }} has {{ item.usage_percent }}% usage, which exceeds threshold!"
#      loop: "{{ sorted_pools }}"
#      when: item.usage_percent | float > 85
